<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Simulations | Open Neuroscience</title><link>https://open-neuroscience.com/category/simulations/</link><atom:link href="https://open-neuroscience.com/category/simulations/index.xml" rel="self" type="application/rss+xml"/><description>Simulations</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>CC BY SA 4.0</copyright><lastBuildDate>Fri, 22 Jan 2021 00:00:00 +0000</lastBuildDate><image><url>https://open-neuroscience.com/media/openneuroscience_logo_dark.svg</url><title>Simulations</title><link>https://open-neuroscience.com/category/simulations/</link></image><item><title>NetPyNE</title><link>https://open-neuroscience.com/post/netpyne/</link><pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate><guid>https://open-neuroscience.com/post/netpyne/</guid><description>&lt;p>NetPyNE (Networks using Python and NEURON) is a Python package to facilitate the development, simulation, parallelization, analysis, and optimization of biophysical neuronal networks using the NEURON simulator.&lt;/p>
&lt;p>For more details, installation instructions, documentation, tutorials, forums, videos and more, please visit: &lt;a href="http://www.netpyne.org">www.netpyne.org&lt;/a>&lt;/p>
&lt;h2 id="project-authors">Project Author(s)&lt;/h2>
&lt;p>Salvador Dura-Bernal&lt;/p>
&lt;h2 id="project-links">Project Links&lt;/h2>
&lt;p>&lt;a href="https://github.com/Neurosim-lab/netpyne">https://github.com/Neurosim-lab/netpyne&lt;/a>&lt;/p>
&lt;h2 id="project-video">Project Video&lt;/h2>
&lt;p>&lt;a href="https://youtu.be/TV7ipuDHBd0">https://youtu.be/TV7ipuDHBd0&lt;/a>&lt;/p>
&lt;hr>
&lt;p>This post was automatically generated by
Joe Graham&lt;/p>
&lt;hr></description></item><item><title>neurolib</title><link>https://open-neuroscience.com/post/neurolib/</link><pubDate>Tue, 10 Nov 2020 00:00:00 +0000</pubDate><guid>https://open-neuroscience.com/post/neurolib/</guid><description>&lt;p>Easy whole-brain modeling for computational neuroscientists 👩🏿‍🔬💻🧠&lt;/p>
&lt;p>In its essence, neurolib is a computational framework for simulating coupled neural mass models written in Python. It helps you to easily load structural brain scan data to construct brain networks where each node is a neural mass representing a single brain area. This network model can be used to simulate whole-brain dynamics.&lt;/p>
&lt;p>neurolib provides a simulation and optimization framework which allows you to easily implement your own neural mass model, simulate fMRI BOLD activity, analyse the results and fit your model to empirical data.&lt;/p>
&lt;p>With neurolib, our goal is to create a hackable framework for coders and focus on the simulation and optimization machinery. In this sense, neurolib is primarily a modern research tool and our main goal is to provide an accessible research framework. However, it is built with people in mind who are new to the field and just want to get going. We have made it as easy as possible to setup a simulation or to implement your own model and run your experiments.&lt;/p>
&lt;h2 id="project-authors">Project Author(s)&lt;/h2>
&lt;p>Caglar Cakan; Nikola Jajcay&lt;/p>
&lt;h2 id="project-links">Project Links&lt;/h2>
&lt;p>&lt;a href="https://github.com/neurolib-dev/neurolib">https://github.com/neurolib-dev/neurolib&lt;/a>&lt;/p>
&lt;hr>
&lt;p>This post was automatically generated by
Caglar Cakan&lt;/p>
&lt;hr></description></item><item><title>Computational Cognitive Neuroscience 4th Ed</title><link>https://open-neuroscience.com/post/computational_cognitive_neuroscience_4th_ed/</link><pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate><guid>https://open-neuroscience.com/post/computational_cognitive_neuroscience_4th_ed/</guid><description>&lt;p>This is the 4th edition of the online, freely available textbook, providing a complete, self-contained introduction to the field of Computational Cognitive Neuroscience, where computer models of the brain are used to understand a wide range of cognitive functions, including perception, attention, motor control, learning, memory, language, and executive function.&lt;/p>
&lt;p>The first part of this textbook develops a coherent set of computational and neural principles that capture the behavior of networks of interconnected neurons, and the second part applies these principles to understand the above-listed cognitive functions.&lt;/p>
&lt;h2 id="project-authors">Project Author(s)&lt;/h2>
&lt;p>Randall C. O&amp;rsquo;Reilly; Yuko Munakata; Michael J. Frank; Thomas E. Hazy&lt;/p>
&lt;h2 id="project-links">Project Links&lt;/h2>
&lt;p>&lt;a href="https://compcogneuro.org">https://compcogneuro.org&lt;/a>&lt;/p>
&lt;hr>
&lt;p>This post was automatically generated by
Randall C. O&amp;rsquo;Reilly&lt;/p>
&lt;hr></description></item><item><title>Emergent Neural Network Simulation Software</title><link>https://open-neuroscience.com/post/emergent_neural_network_simulation_software/</link><pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate><guid>https://open-neuroscience.com/post/emergent_neural_network_simulation_software/</guid><description>&lt;p>Neural network simulation software written in Go and Python, for developing biologically-based but also computationally functional neural models. Features an interactive 3D interface for visualizing networks and data, and has many implemented models of a wide range of cognitive phenomena.&lt;/p>
&lt;h2 id="project-authors">Project Author(s)&lt;/h2>
&lt;p>Randall C. O&amp;rsquo;Reilly&lt;/p>
&lt;h2 id="project-links">Project Links&lt;/h2>
&lt;p>&lt;a href="https://github.com/emer/emergent">https://github.com/emer/emergent&lt;/a>&lt;/p>
&lt;hr>
&lt;p>This post was automatically generated by
Randall C. O&amp;rsquo;Reilly&lt;/p>
&lt;hr></description></item><item><title>PsychRNN: An Accessible and Flexible Python Package for Training Recurrent Neural Network Models on Cognitive Tasks</title><link>https://open-neuroscience.com/post/psychrnn_an_accessible_and_flexible_python_package_for_training_recurrent_neural_network_models_on_cognitive_tasks/</link><pubDate>Sun, 04 Oct 2020 00:00:00 +0000</pubDate><guid>https://open-neuroscience.com/post/psychrnn_an_accessible_and_flexible_python_package_for_training_recurrent_neural_network_models_on_cognitive_tasks/</guid><description>&lt;p>PsychRNN is designed for neuroscientists and psychologists who are interested in RNNs as models of cognitive function in the brain.&lt;/p>
&lt;p>Despite growing interest in RNNs as models of brain function, this approach poses relatively high barriers to entry to researchers, due to the technical know-how required for specialized deep learning software (e.g. TensorFlow or PyTorch) to train artificial neural network models.&lt;/p>
&lt;p>We designed PsychRNN with accessibility and flexibility as important goals.&lt;/p>
&lt;p>The frontend for users to define tasks and train RNNs uses only Python &amp;amp; NumPy, with no requirement for deep learning software.&lt;/p>
&lt;p>The backend, based on TensorFlow for model training, is readily extensible. This design allows for accessible high-level specification and parameterization of tasks and models, using only a few lines of Python.&lt;/p>
&lt;p>Modularity is central to PsychRNN&amp;rsquo;s design, to achieve flexibility in defining and parameterizing tasks and networks. This facilitates investigation of how task features (e.g. timing or input/output channels) shape the network solutions learned by the models.&lt;/p>
&lt;p>PsychRNN also provides support for implementation of neurobiologically motivated constraints on synaptic connectivity, such as: no autapses, structured connectivity (e.g. for multi-region RNNs), Dale&amp;rsquo;s principle (separate excitatory &amp;amp; inhibitory cells), and fixed nonplastic subset of synapses. Modularity enables implementation of curriculum learning, or task shaping. RNNs can be trained in closed-loop, with tasks progressively adjusted as behavioral performance improves. This is more similar to animal training, for investigation of how shaping impacts neural solutions.&lt;/p>
&lt;h2 id="project-authors">Project Author(s)&lt;/h2>
&lt;p>Daniel B Ehrlich; Jasmine T Stone; David Brandfonbrener; Alexander Atanasov; John D Murray&lt;/p>
&lt;h2 id="project-links">Project Links&lt;/h2>
&lt;p>&lt;a href="https://github.com/murraylab/PsychRNN">https://github.com/murraylab/PsychRNN&lt;/a>&lt;/p>
&lt;hr>
&lt;p>This post was automatically generated by
Jasmine Stone&lt;/p>
&lt;hr></description></item><item><title>INCF TrainingSpace</title><link>https://open-neuroscience.com/post/incf_trainingspace/</link><pubDate>Wed, 30 Sep 2020 00:00:00 +0000</pubDate><guid>https://open-neuroscience.com/post/incf_trainingspace/</guid><description>&lt;p>TrainingSpace is an online hub that aims to make neuroscience educational materials more accessible to the global neuroscience community developed by the Training and Education Committee composed of members from the INCF network, HBP, SfN, FENS, IBRO, IEEE, BD2K, and iNeuro Initiative. As a hub, TrainingSpace provides users with access to:&lt;/p>
&lt;ul>
&lt;li>Multimedia educational content from courses, conference lectures, and laboratory exercises from some of the world’s leading neuroscience institutes and societies&lt;/li>
&lt;li>Study tracks to facilitate self-guided study&lt;/li>
&lt;li>Tutorials on tools and open science resources for neuroscience research&lt;/li>
&lt;li>A Q&amp;amp;A forum&lt;/li>
&lt;li>A neuroscience encyclopedia that provides users with access to over 1.000.000 publicly available datasets as well as links to literature references and scientific abstracts&lt;/li>
&lt;/ul>
&lt;p>Topics currently included in TrainingSpace include: general neuroscience, clinical neuroscience, computational neuroscience, neuroinformatics, computer science, data science, and open science.&lt;/p>
&lt;p>All courses and conference lectures in TrainingSpace include a general description, topics covered, links to prerequisite courses if applicable, and links to software described in or required for the course, as well as links to the next lecture in the course or more advanced related courses. In addition to providing resources for students and researchers, TrainingSpace also provides resources for instructors, such laboratory exercises, open science services, and access to publicly available datasets and models.&lt;/p>
&lt;h2 id="project-authors">Project Author(s)&lt;/h2>
&lt;p>INCF team&lt;/p>
&lt;h2 id="project-links">Project Links&lt;/h2>
&lt;p>&lt;a href="https://training.incf.org">https://training.incf.org&lt;/a>&lt;/p>
&lt;h2 id="project-video">Project Video&lt;/h2>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=nHnW0z2qeQE">https://www.youtube.com/watch?v=nHnW0z2qeQE&lt;/a>&lt;/p>
&lt;hr>
&lt;p>This post was automatically generated by
Malin Sandström&lt;/p>
&lt;hr></description></item><item><title>Open Source Brain</title><link>https://open-neuroscience.com/post/open_source_brain/</link><pubDate>Tue, 29 Sep 2020 00:00:00 +0000</pubDate><guid>https://open-neuroscience.com/post/open_source_brain/</guid><description>&lt;p>Open Source Brain, a platform for sharing, viewing, analyzing, and simulating standardized models from different brain regions and species.&lt;/p>
&lt;p>Model structure and parameters can be automatically visualized and their dynamical properties explored through browser-based simulations.&lt;/p>
&lt;p>Infrastructure and tools for collaborative interaction, development, and testing are also provided.&lt;/p>
&lt;h2 id="project-authors">Project Author(s)&lt;/h2>
&lt;p>Open Source Brain contributors&lt;/p>
&lt;h2 id="project-links">Project Links&lt;/h2>
&lt;p>&lt;a href="http://www.opensourcebrain.org/">http://www.opensourcebrain.org/&lt;/a>&lt;/p>
&lt;hr>
&lt;p>This post was automatically generated by
Ankur Sinha (@ OSB/University College London)&lt;/p>
&lt;hr></description></item><item><title>NeuroFedora</title><link>https://open-neuroscience.com/post/neurofedora/</link><pubDate>Sat, 26 Sep 2020 00:00:00 +0000</pubDate><guid>https://open-neuroscience.com/post/neurofedora/</guid><description>&lt;p>NeuroFedora is an initiative to provide a ready to use Fedora Linux based Free/Open source software platform for neuroscience. We believe that similar to Free software, science should be free for all to use, share, modify, and study. The use of Free software also aids reproducibility, data sharing, and collaboration in the research community. By making the tools used in the scientific process easier to use, NeuroFedora aims to take a step to enable this ideal.&lt;/p>
&lt;h2 id="project-authors">Project Author(s)&lt;/h2>
&lt;p>NeuroFedora volunteers @ the Fedora project&lt;/p>
&lt;h2 id="project-links">Project Links&lt;/h2>
&lt;p>&lt;a href="https://neuro.fedoraproject.org">https://neuro.fedoraproject.org&lt;/a>&lt;/p>
&lt;hr>
&lt;p>This post was automatically generated by
Ankur Sinha (NeuroFedora SIG member)&lt;/p>
&lt;hr></description></item><item><title>LED Zappelin'</title><link>https://open-neuroscience.com/post/led_zappelin/</link><pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate><guid>https://open-neuroscience.com/post/led_zappelin/</guid><description>&lt;p>Two-photon (2P) microscopy is a cornerstone technique in neuroscience research. However, combining 2P imaging with spectrally arbitrary light stimulation can be challenging due to crosstalk between stimulation light and fluorescence detection. To overcome this limitation, we present a simple and low-cost electronic solution based on an ESP32 microcontroller and a TLC5947 LED driver to rapidly time-interleave stimulation and detection epochs during scans. Implemented for less than $100, our design can independently drive up to 24 arbitrary spectrum LEDs to meet user requirements. We demonstrate the utility of our stimulator for colour vision experiments on the in vivo tetrachromatic zebrafish retina and for optogenetic circuit mapping in Drosophila.&lt;/p>
&lt;h2 id="project-authors">Project Author(s)&lt;/h2>
&lt;p>Maxime Zimmermann; Andre Maia Chagas; Philipp Bartel; Sinzi Pop, Lucia Pierto Godino; Tom Baden&lt;/p>
&lt;h2 id="project-links">Project Links&lt;/h2>
&lt;p>&lt;a href="https://github.com/BadenLab/LED-Zappelin">https://github.com/BadenLab/LED-Zappelin&lt;/a>&lt;/p>
&lt;hr>
&lt;p>This post was automatically generated by
Maxime Zimmermann&lt;/p>
&lt;hr></description></item></channel></rss>